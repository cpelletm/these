import sys
sys.path.append('D:\\These Clément\\these\\python_clément')
sys.path.append('/home/pellet-mary/these/python_clément')
from analyse import *

#les x et y sont inversés pour cette série
fnames=glob.glob('*.csv')
fval=[float(fnames[i][2:-5]) for i in range(len(fnames))] 
fnames=[s for _,s in sorted(zip(fval,fnames))]
fval=sorted(fval)


n=len(fval)


# posm=np.zeros(n)
# posp=np.zeros(n)

# i=0
# posm0=2867.5
# posp0=2876.5

# x,y=extract_data(fnames[i])
# m=find_elem(posm0,x)
# M=find_elem(posp0,x)
# x=x[m-10:M+10]
# y=y[m-10:M+10]
# cs=[posm0,posp0]
# popt,yfit=ESR_n_pics(x,y,cs=cs)
# posm[i]=popt[1][0]
# posp[i]=popt[1][1]



# for i in range(1,n):


# 	posm0=posm[i-1]
# 	posp0=posp[i-1]

# 	x,y=extract_data(fnames[i])
# 	m=find_elem(posm0,x)
# 	M=find_elem(posp0,x)
# 	x=x[m-12:M+12]
# 	y=y[m-12:M+12]
# 	cs=[posm0,posp0]
# 	popt,yfit=ESR_n_pics(x,y,cs=cs,typ='lor')
# 	posm[i]=popt[1][0]
# 	posp[i]=popt[1][1]

# plt.plot(fval,posm)
# plt.plot(fval,posp)


posm=[2867.0549444609396, 2867.095914971353, 2867.226974175239, 2867.367123620441, 2867.4625914225426, 2867.6206775367896, 2867.74257684717, 2867.887888774431, 2868.0358730345283, 2868.1642705941968, 2868.2796832466943, 2868.3908104437755, 2868.526332540456, 2868.6610670640316, 2868.8108555524545, 2868.957364785655, 2869.12118075672, 2869.2642901306967, 2869.4099261824263, 2869.558949752651, 2869.7210508322505, 2869.8865036801362, 2870.038037037653, 2870.223239890035, 2870.401623260014, 2870.5671450493687, 2870.7609783831344, 2870.970982116486, 2871.1688913983885, 2871.354238642951, 2871.543919034878, 2871.7277224896734, 2871.9242358322517, 2872.0866639623277, 2872.2715527337214, 2872.434504090634, 2872.621633280822, 2872.820912954639, 2873.016977016549, 2873.2142529460984, 2873.412719315668, 2873.6340192277894, 2873.8247876897553, 2874.0141177939618, 2874.1907086002843, 2874.416959307076, 2874.629779188831, 2874.7771534484054, 2875.002283874386, 2875.2303014316426, 2875.4554028884077, 2875.6491024479706, 2875.910603453549, 2876.1106911716834, 2876.3686503966064, 2876.6066491952774, 2876.8511469060163, 2877.042751976341, 2877.2624069545163, 2877.4682891545153, 2877.6986128136245, 2877.9321994446664, 2878.096743787412, 2878.291874077428, 2878.489587098675, 2878.688000506864, 2878.903165165831, 2879.1399573133253, 2879.385381317456, 2879.570763731996, 2879.785731396494, 2880.0223088760913, 2880.262387569575, 2880.5414164317867, 2880.779383313951, 2881.077723350805, 2881.3133514955953, 2881.594502382543, 2881.8947784790284, 2882.1441036095234, 2882.4509986621333, 2882.692572372292, 2882.9986150543195, 2883.247483859114, 2883.5367954582875, 2883.8301799604837, 2884.15381490507, 2884.385539021199, 2884.7267245028065, 2884.9947470268116, 2885.34215546631, 2885.6245102052653, 2885.9485498416916, 2886.2829795460048, 2886.6230806678805, 2886.920800698652, 2887.291637200397, 2887.589870377098, 2887.903893852811, 2888.2708316767803, 2888.587950646142, 2888.912907011995, 2889.220095522942, 2889.4921359443274, 2889.8416065266115, 2890.2185561109904, 2890.5106747892487, 2890.878502759402, 2891.223348150926, 2891.56413610482, 2891.9038988759994, 2892.2458123367105, 2892.544268910606, 2892.911126933464, 2893.2815740191245, 2893.6188588179884, 2893.9172280460743, 2894.297858007862, 2894.646406779176, 2894.9968226695632, 2895.3257780876415, 2895.6600902215773, 2896.0110689727117, 2896.367491795027, 2896.700912150045, 2897.093871805364, 2897.433172582225, 2897.798757103882, 2898.172172025918, 2898.528405048519, 2898.809929153309, 2899.23507857645, 2899.5821487732783, 2899.9451483764874, 2900.302553917633, 2900.6678348650635, 2901.0118698895008, 2901.363921038272, 2901.8179110971637, 2902.1218506333075, 2902.515154046968, 2902.920394764336, 2903.3058080774786, 2903.687439162575, 2904.0329599690967, 2904.412012178257, 2904.8289448109263, 2905.206598631858, 2905.5279206088185, 2905.9540256128694, 2906.32744465173, 2906.7257279172018, 2907.088393151678, 2907.529767866995, 2907.859781254663, 2908.2397071791256, 2908.6208356173943, 2909.028290735362, 2909.402693010026, 2909.7507530488833, 2910.164035622146, 2910.544623904749, 2910.916959073945, 2911.316615023064, 2911.7335687021127, 2912.1141371780723, 2912.500318082226, 2912.901015540634, 2913.2802534113607, 2913.655543999978, 2914.0688208407887, 2914.4230205478075, 2914.7759014111757, 2915.1729070048264, 2915.5787392998272, 2915.9498289906255, 2916.3038125274106, 2916.691431563894, 2917.017397377467, 2917.3790911587935, 2917.7808115944954, 2918.172796337921, 2918.535302700423, 2918.949591071631, 2919.256433431292, 2919.6946273161034, 2920.113038469347, 2920.494144963992, 2920.8881717596964, 2921.2988003638015, 2921.7078502592217, 2922.1269891022603, 2922.599108886422, 2923.0164939192578, 2923.422299508547, 2923.8599685716154, 2924.358891718524, 2924.780600896588, 2925.2156110615974, 2925.675523087332, 2926.109507140657]
posp=[2876.6724287946836, 2876.904237386128, 2876.997607533236, 2877.082794302065, 2877.2056996797032, 2877.304338646597, 2877.4269357095136, 2877.5285446575645, 2877.6473187176402, 2877.808822376707, 2877.920204595137, 2878.0790712879175, 2878.223190644192, 2878.3642156713986, 2878.530330224476, 2878.6879224249774, 2878.8603785908995, 2879.026363580327, 2879.1955012149515, 2879.380870470487, 2879.55398243956, 2879.7483388726378, 2879.9424865272927, 2880.1261120672893, 2880.3210012062036, 2880.540703721745, 2880.7583269493634, 2880.9736262659703, 2881.1856408270514, 2881.3964807022403, 2881.6267065092834, 2881.8542979675412, 2882.0983752916013, 2882.3600221553547, 2882.5889076024705, 2882.8994529342326, 2883.1303295656307, 2883.4280757261827, 2883.6547718342654, 2883.9949566780538, 2884.2922806870533, 2884.580767128551, 2884.8957042458287, 2885.238141866984, 2885.552314799061, 2885.8364684103335, 2886.141318804336, 2886.5358851429364, 2886.820446134226, 2887.160714745862, 2887.5158507534, 2887.850750423877, 2888.2136121932217, 2888.5720319627376, 2888.9448337134104, 2889.3398309485938, 2889.7059773657024, 2890.1347798066754, 2890.5430761207167, 2890.9500308420234, 2891.350590602122, 2891.768592852781, 2892.206865802654, 2892.5986625506357, 2893.0825116437472, 2893.4564476795554, 2893.895000594397, 2894.3598511852783, 2894.779490793022, 2895.244756985352, 2895.678206641145, 2896.1362935013412, 2896.5898393546204, 2897.0415090462134, 2897.5117067464494, 2897.990985870142, 2898.435806871583, 2898.927414442409, 2899.4020547054624, 2899.9055058980102, 2900.3627022561714, 2900.888007776256, 2901.380174956657, 2901.9233175098148, 2902.4095814649204, 2902.931993367339, 2903.42637995331, 2903.9223406413976, 2904.4580388993013, 2904.989408174615, 2905.526744189868, 2906.0369585401095, 2906.571304899975, 2907.1064071137394, 2907.6227408965774, 2908.199641763902, 2908.682065225371, 2909.2472187111207, 2909.804615672277, 2910.393402939305, 2910.9355817714254, 2911.4674349156876, 2912.0377904803227, 2912.5966970658624, 2913.172061340236, 2913.7647519290117, 2914.2779675639135, 2914.885756615919, 2915.4669167587626, 2916.036434390946, 2916.582642336621, 2917.164815737767, 2917.764860217581, 2918.364866279911, 2918.957269915675, 2919.52692797094, 2920.149235046159, 2920.7766084224672, 2921.3913099765123, 2922.0216206729306, 2922.648320416465, 2923.2241125885375, 2923.903635454555, 2924.5556601732487, 2925.2252526080465, 2925.8939168275865, 2926.560651672709, 2927.236680845066, 2927.8991582926656, 2928.5697595464185, 2929.247615845934, 2929.956629141522, 2930.6359551254573, 2931.3500729638918, 2932.0588681431723, 2932.748090411568, 2933.4854372172977, 2934.1988949985584, 2934.92810636675, 2935.6596410525276, 2936.351032279111, 2937.0777013893135, 2937.853810820891, 2938.5090641325323, 2939.277506256925, 2940.0292975693415, 2940.794281542325, 2941.5619063157537, 2942.300001645105, 2943.079081288198, 2943.8174730105607, 2944.6097163480854, 2945.353120657245, 2946.0852112572247, 2946.8588613944457, 2947.6168503540252, 2948.372111890163, 2949.147053448456, 2949.881531408081, 2950.693632859512, 2951.433528282364, 2952.201469371824, 2952.9688261202846, 2953.7279448887875, 2954.493682339298, 2955.247203391685, 2956.0101036192823, 2956.773329240384, 2957.527445158814, 2958.2586316102734, 2959.0421410402096, 2959.7766002257754, 2960.5210434395312, 2961.30125548822, 2962.0241639045134, 2962.779502484705, 2963.601074982038, 2964.340044950392, 2965.0816161428634, 2965.8538683766797, 2966.7049855037026, 2967.4802974170134, 2968.288959352422, 2969.128870160176, 2969.911175997061, 2970.7548234029864, 2971.5802912453114, 2972.4145253522474, 2973.259690007653, 2974.137770972437, 2974.941991301178, 2975.8052647945074, 2976.702676792229, 2977.5087459263586, 2978.39469425695, 2979.247908788437, 2980.107657478956, 2980.9552469265664, 2981.8215845007076, 2982.713100142519, 2983.581795067463]
posm=np.array(posm)
posp=np.array(posp)


#Pas le truc le plus clean du monde, mais je trouve que le champ mag vaut en gros 29*x. ce qui me perturbe c'est que mes transitions sont plus proches que la théorie. Plus loin j'aurais pu accuser un mauvais alignement, mais plus proche je vois pas. P-e un problème de non linearité de l'EM, ou bien les fits qui marchent pas très bien pour en champ faible
# pos=np.array(fval)
# amps=pos*29
# transim=[]
# transip=[]
# for amp in amps:
# 	H=NVHamiltonian([amp,0,0],c=5,E=4)
# 	transis=H.transitions()
# 	transim+=[transis[0]]
# 	transip+=[transis[1]]

# plt.plot(fval,posm,'x')
# plt.plot(fval,posp,'x')

# plt.plot(fval,transim)
# plt.plot(fval,transip)

B=np.array(fval)*29
nmax=180
plt.plot(B[:nmax],posm[:nmax],'o', markerfacecolor='None')
plt.plot(B[:nmax],posp[:nmax],'o', markerfacecolor='None')


# for i in range(n):

# 	fname=fnames[i]
# 	x,y=extract_data(fname)
# 	peaks=find_ESR_peaks(x,y,width=4,threshold=0.3)
# 	ecart_min=peaks[1]-peaks[0]
# 	pos=0
# 	for k in range(0,len(peaks)-1) :
# 		if peaks[k+1]-peaks[k]<ecart_min :
# 			ecart_min=peaks[k+1]-peaks[k]
# 			pos=k
# 	posm[i]=peaks[pos]
# 	posp[i]=peaks[pos+1]

# #Cauchemard du vendredi soir putain....
# posm=list(posm)
# posp=list(posp)
# fval_short=list(fval)

# posm=posm[0:55]+posm[75:100]+posm[106:]
# posp=posp[0:55]+posp[75:100]+posp[106:]
# fval_short=fval[0:55]+fval[75:100]+fval[106:]



# plt.plot(fval_short,posm,'x')
# popt,yfit=fit_ordre_4(fval_short,posm)
# # plt.plot(fval_short,yfit)
# print(popt)
# x=np.linspace(0.8,5,501)
# freqs=2862.3732486672525+5.336405357793713*x+0.4892478887834715*x**2+0.4361255116793501*x**3-0.047696861387582994*x**4
# plt.plot(x,freqs)
# plt.plot(fval_short,posp,'x')
# popt,yfit=fit_ordre_4(fval_short,posp)
# print(popt)
# x=np.linspace(0.8,5,501)
# freqs=2879.6100403000905-10.350382035600058*x+8.72563530864743*x**2-0.5448652051415266*x**3+0.008459469208990177*x**4
# plt.plot(x,freqs)

plt.show()